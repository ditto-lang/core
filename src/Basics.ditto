module Basics exports (..);

identity (a : a) : a = a;

always (a : a) (_ignored : b) : a = a;

not (b : Bool) : Bool = if b then False else True;

flip (fn : a -> b -> c) (b : b) (a : a) : c = fn a b;

curry (fn : a -> b -> c) (args : (a, b)) : c =
  match args with
  | (a, b) -> fn a b;

uncurry (fn : (a, b) -> c) (a : a) (b : b) : c = fn (a, b);
